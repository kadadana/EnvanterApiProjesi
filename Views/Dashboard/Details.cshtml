@{
Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}
@model X.PagedList.IPagedList<EnvanterApiProjesi.Models.EnvanterModel>
@using X.PagedList.Mvc.Core

@using X.PagedList.Mvc.Core
@{
    var labels = LabelHelper.Labels;
}
@if(Model != null)
{
@section Navbar{
    <div class="ms-auto">
                <div class="dropdown" style="color:#0D6EFD">
                    <a class="btn btn-secondary dropdown-toggle" style="background-color:white; color: #0D6EFD;"
                        href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                        Menü
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuLink">
                        <li><a class="dropdown-item" asp-controller="Dashboard" asp-action="Edit" asp-route-id="@Model[0].Id">Düzenle</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Logout", "Login")" style="color: red">Çıkış Yap</a></li>
                    </ul>
                </div>
            </div>
}



<div class="container-fluid mt-2">


<div class="row">
    <div class="col-md-12">
        <h3>
            "@Model[0].Id" Kimlik Numaralı Bilgisayar
        </h3>
    </div>
</div>
    @{
        var model = Model[0];
        var type = model.GetType();

        var leftLabels = labels.Take(labels.Count /2);
        var rightLabels = labels.Skip(labels.Count /2);
    }
    <div class ="row">
        <div class ="col-md-6">
            @foreach (var item in leftLabels)
            {
                var prop = type.GetProperty(item.Key);
                var value = prop != null ? prop.GetValue(model, null)?.ToString() : "";
                var displayValue = (item.Key == "RAM" || item.Key == "DiskGB") ? value + " GB" : value;
                <div class ="row info-row">
                    <div class ="col-6 info-label" style ="font-weight: bold;">@item.Value</div>
                    <div class ="col-6">@displayValue</div>
                </div>
            }
        </div>
        <div class ="col-md-6">
            @foreach (var item in rightLabels)
            {
                var prop = type.GetProperty(item.Key);
                var value = prop != null ? prop.GetValue(model, null)?.ToString() : "";
                var displayValue = (item.Key == "RAM" || item.Key == "DiskGB") ? value + " GB" : value;
                <div class ="row info-row">
                    <div class ="col-6 info-label" style ="font-weight: bold;">@item.Value</div>
                    <div class ="col-6">@displayValue</div>
                </div>
            }
        </div>
    </div>

    <div class ="row">
        <div class="col-md-12">
            <div style ="overflow-x: auto; white-space: nowrap; max-width: 100%">
                <table class="table table-bordered" style="border: 1px solid #3498db;">
                    <thead>
                        <tr>
                            @foreach (var item in labels)
                            {
                                <th style="background-color: #0d6efd; color: white; text-decoration: none; text-shadow: 1px 1px 2px black, 0 0 25px black, 0 0 5px black;">
                                @item.Value
                            </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var comp in Model)
                        {
                            var _type = comp.GetType();
                            <tr>
                                @foreach (var item in labels)
                                {
                                    var prop = _type.GetProperty(item.Key);
                                    <td>
                                    @prop.GetValue(comp)
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div>
                @Html.PagedListPager(Model, page => Url.Action("Details", new { page }),
                new PagedListRenderOptions
                {
                DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                DisplayLinkToLastPage = PagedListDisplayMode.Always,
                DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                DisplayLinkToNextPage = PagedListDisplayMode.Always,
                DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                MaximumPageNumbersToDisplay = 5,
                UlElementClasses = new[] { "pagination", "justify-content-center" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" }
                })
            </div>
        </div>
    </div>
</div>
}
else
{
    TempData["alert"] = "Bu bilgisayara ait detay kaydı bulunamadı.";

    <div class="text-center">
        <a class="btn btn-primary" asp-action="DashboardMain">Ana menüye dön</a>
    </div>

}